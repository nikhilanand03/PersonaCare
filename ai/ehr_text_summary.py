# -*- coding: utf-8 -*-
"""EHR_text_summary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D3-tm7RUKSzf5-pU7z_C9xJng4CRjA92
"""

!pip install fpdf
!pip install llama_index
!pip install peft
!pip install bitsandbytes
!pip install accelerate

!pip install csv2pdf

# from google.colab import drive
# drive.mount('/content/drive')

import pandas as pd
import numpy as np
from transformers import pipeline
import torch
from transformers import BartForConditionalGeneration, BartTokenizer

"""# Generating the Passage or data for Question Answering"""

diagnosis = pd.read_csv("/content/drive/MyDrive/Llama_Index/AdmissionsDiagnosesCorePopulatedTable.csv","\t")
labs = pd.read_csv("/content/drive/MyDrive/Llama_Index/LabsCorePopulatedTable.csv","\t")
patient = pd.read_csv("/content/drive/MyDrive/Llama_Index/PatientCorePopulatedTable.csv","\t")

diagnosis.head()

labs.head()

patient.head()

diagnosis_pid = list(set(list(diagnosis["PatientID"])))
labs_pid = list(set(list(labs["PatientID"])))
patient_pid = list(set(list(patient["PatientID"])))

print(len(diagnosis_pid), len(labs_pid), len(patient_pid))

# Checking the databases
for i in range(len(labs_pid)):
  if labs_pid[i] not in diagnosis_pid:
    print(i)

patient_ids = labs_pid[:10]

for i in range(len(patient_ids)):
  id = patient_ids[i]
  patient_rows = []

  # EHR from Diagnosis test
  condition = diagnosis["PatientID"] == id
  matching_indices = diagnosis.loc[condition].index

  for j in range(len(matching_indices)):
    patient_rows.append(["Condition" + j,diagnosis["PrimaryDiagnosisDescription"][matching_indices[j]]])

  # EHR from Labs dataset
  condition = labs["PatientID"] == id
  matching_indices = labs.loc[condition].index

  for j in range(min(30, len(matching_indices))):
    lab_name = str(labs["LabName"][matching_indices[j]])
    lab_value = str(labs["LabValue"][matching_indices[j]])
    lab_units = str(labs["LabUnits"][matching_indices[j]])
    patient_rows.append([lab_name, lab_value + " " + lab_units])

  # EHR from Patient dataset
  condition = patient["PatientID"] == id
  matching_indices = patient.loc[condition].index

  for j in range(len(matching_indices)):
    gender = str(patient["PatientGender"][matching_indices[j]])
    dob = str(patient["PatientDateOfBirth"][matching_indices[j]])
    race = str(patient["PatientRace"][matching_indices[j]])
    marital = str(patient["PatientMaritalStatus"][matching_indices[j]])
    lang = str(patient["PatientLanguage"][matching_indices[j]])
    pov = str(patient["PatientPopulationPercentageBelowPoverty"][matching_indices[j]])
    patient_rows.append(["gender", gender])
    patient_rows.append(["dob", dob])
    patient_rows.append(["race", race])
    patient_rows.append(["marital", marital])
    patient_rows.append(["lang", lang])
    patient_rows.append(["pov", pov])

for i in range(len(patient_ids)):
  id = patient_ids[i]
  prompt = ""
  prompt = prompt + "The patient ID is {}.\n".format(id)

  # EHR from Diagnosis dataset
  prompt = prompt + "The disease/s being faced by the patient is/are "
  condition = diagnosis["PatientID"] == id
  matching_indices = diagnosis.loc[condition].index
  diseases = []

  for j in range(len(matching_indices)):
    diseases.append(diagnosis["PrimaryDiagnosisDescription"][matching_indices[j]])
  disease = " ".join(diseases)
  prompt = prompt + disease

  # EHR from Labs dataset
  prompt = prompt + ".\n\nThe various test levels of the patient is/are"
  condition = labs["PatientID"] == id
  matching_indices = labs.loc[condition].index

  for j in range(min(30, len(matching_indices))):
    lab_name = str(labs["LabName"][matching_indices[j]])
    lab_value = str(labs["LabValue"][matching_indices[j]])
    lab_units = str(labs["LabUnits"][matching_indices[j]])
    prompt = prompt + "\n{}. The lab {} gave its level as {} {}.".format(j,lab_name,lab_value,lab_units)

  # EHR from Patient dataset
  prompt = prompt + "\n\nThe background of the patient is \n"
  condition = patient["PatientID"] == id
  matching_indices = patient.loc[condition].index

  for j in range(len(matching_indices)):
    gender = str(patient["PatientGender"][matching_indices[j]])
    dob = str(patient["PatientDateOfBirth"][matching_indices[j]])
    race = str(patient["PatientRace"][matching_indices[j]])
    marital = str(patient["PatientMaritalStatus"][matching_indices[j]])
    lang = str(patient["PatientLanguage"][matching_indices[j]])
    pov = str(patient["PatientPopulationPercentageBelowPoverty"][matching_indices[j]])
    prompt = prompt + """The patient gender is {}. The date of birth of the person is {}. The patient is from {} ethnicity. The marital status of the person is {}. The patient speaks {} language. The patient population percentage that is below poverty is {}.\n""".format(gender,dob,race,marital,lang,pov)

  lines = [prompt]
  with open('/content/drive/MyDrive/Llama_Index/Summarization/Patient{}.txt'.format(i), 'w') as f:
      for line in lines:
          f.write(line)

  print("Hi",i)